{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOPz5nF1pHDBwcfXJDwdcPF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/1rd0/18lab_bek/blob/master/Gym_COACH%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "nZ0GgY7A6c4L"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Embedding, Flatten, Input, Dot, Dense\n",
        "\n",
        "# Чтение данных из файлов Excel\n",
        "users_df = pd.read_excel('Users.xlsx')\n",
        "exercises_df = pd.read_excel('Ex.xlsx')\n",
        "plans_df = pd.read_excel('Planss.xlsx')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(users_df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rnaoG2jZ-ebR",
        "outputId": "679d9450-5351-4a79-b934-611c7a641f07"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   user_id  age  weight gender               goal fitness_level  \\\n",
            "0        1   28      75      М          похудение       средний   \n",
            "1        2   32      85      Ж        набор массы     начальный   \n",
            "2        3   29      68      Ж  поддержание формы       средний   \n",
            "3        4   27      70      М        набор массы   продвинутый   \n",
            "4        5   30      72      Ж          похудение    начинающий   \n",
            "\n",
            "   workout_frequency preferred_workout_types  \n",
            "0                  1   [\"кардио\", \"силовые\"]  \n",
            "1                  3                [\"йога\"]  \n",
            "2                  2   [\"кардио\", \"силовые\"]  \n",
            "3                  3             [\"силовые\"]  \n",
            "4                  2              [\"кардио\"]  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Функция для фильтрации упражнений\n",
        "def filter_valid_exercises(row, valid_exercise_ids):\n",
        "    return [eid for eid in row if eid in valid_exercise_ids]\n",
        "\n",
        "# Получаем допустимые идентификаторы упражнений\n",
        "valid_exercise_ids = exercises_df['exercise_id'].tolist()\n",
        "\n",
        "# Создаем новый столбец в plans_df, содержащий списки допустимых упражнений\n",
        "plans_df['plan_exercise_id'] = plans_df.drop('user_id', axis=1).apply(lambda row: filter_valid_exercises(row.tolist(), valid_exercise_ids), axis=1)\n",
        "\n",
        "# Создаем матрицу пользователей и упражнений\n",
        "user_exercise_matrix = pd.DataFrame(0, index=users_df['user_id'], columns=exercises_df['exercise_id'])\n",
        "\n",
        "# Заполняем матрицу\n",
        "for index, row in plans_df.iterrows():\n",
        "    for exercise_id in row['plan_exercise_id']:\n",
        "        user_exercise_matrix.loc[row['user_id'], exercise_id] = 1\n",
        "\n",
        "# Подготовка данных для модели\n",
        "user_ids = user_exercise_matrix.index.tolist()\n",
        "exercise_ids = user_exercise_matrix.columns.tolist()\n",
        "\n",
        "data = []\n",
        "\n",
        "for user in user_ids:\n",
        "    for exercise in exercise_ids:\n",
        "        data.append([user, exercise, user_exercise_matrix.loc[user, exercise]])\n",
        "\n",
        "data = np.array(data)\n",
        "\n",
        "# Проверка данных на NaN и бесконечность и замена их на 0\n",
        "data = np.nan_to_num(data)\n",
        "\n",
        "# Проверка данных на NaN и бесконечность после обработки\n",
        "if np.isnan(data).any() or np.isinf(data).any():\n",
        "    print(\"Данные все еще содержат NaN или бесконечные значения после обработки\")\n",
        "\n",
        "# Проверяем максимальные и минимальные значения для user_id и exercise_id\n",
        "print(f'Min user_id: {data[:, 0].min()}, Max user_id: {data[:, 0].max()}')\n",
        "print(f'Min exercise_id: {data[:, 1].min()}, Max exercise_id: {data[:, 1].max()}')\n",
        "\n",
        "# Разделение на тренировочный и тестовый наборы\n",
        "train, test = train_test_split(data, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dJAo5Qoj6gj-",
        "outputId": "c92a337f-4fb6-49b0-f14f-654acf8f51b3"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Min user_id: 1.0, Max user_id: 105.0\n",
            "Min exercise_id: 1.0, Max exercise_id: 50.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Количество пользователей и упражнений\n",
        "n_users = int(data[:, 0].max() + 1)\n",
        "n_exercises = int(data[:, 1].max() + 1)\n",
        "\n",
        "# Входы для пользователей и упражнений\n",
        "user_input = Input(shape=(1,), name='user_input')\n",
        "exercise_input = Input(shape=(1,), name='exercise_input')\n",
        "\n",
        "# Встраивание для пользователей и упражнений\n",
        "user_embedding = Embedding(n_users, 50, name='user_embedding')(user_input)\n",
        "exercise_embedding = Embedding(n_exercises, 50, name='exercise_embedding')(exercise_input)\n",
        "\n",
        "# Сглаживание векторов\n",
        "user_vecs = Flatten()(user_embedding)\n",
        "exercise_vecs = Flatten()(exercise_embedding)\n",
        "\n",
        "# Вычисление сходства (dot product)\n",
        "y = Dot(axes=1)([user_vecs, exercise_vecs])\n",
        "\n",
        "# Определение и компиляция модели\n",
        "model = Model(inputs=[user_input, exercise_input], outputs=y)\n",
        "model.compile(optimizer='adam', loss='mse')\n",
        "model.summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eyNlzeTm6lWc",
        "outputId": "aa62fa2d-4711-4061-9291-4ccf02f708f0"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_4\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                Output Shape                 Param #   Connected to                  \n",
            "==================================================================================================\n",
            " user_input (InputLayer)     [(None, 1)]                  0         []                            \n",
            "                                                                                                  \n",
            " exercise_input (InputLayer  [(None, 1)]                  0         []                            \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " user_embedding (Embedding)  (None, 1, 50)                5300      ['user_input[0][0]']          \n",
            "                                                                                                  \n",
            " exercise_embedding (Embedd  (None, 1, 50)                2550      ['exercise_input[0][0]']      \n",
            " ing)                                                                                             \n",
            "                                                                                                  \n",
            " flatten_8 (Flatten)         (None, 50)                   0         ['user_embedding[0][0]']      \n",
            "                                                                                                  \n",
            " flatten_9 (Flatten)         (None, 50)                   0         ['exercise_embedding[0][0]']  \n",
            "                                                                                                  \n",
            " dot_4 (Dot)                 (None, 1)                    0         ['flatten_8[0][0]',           \n",
            "                                                                     'flatten_9[0][0]']           \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 7850 (30.66 KB)\n",
            "Trainable params: 7850 (30.66 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Обучение модели\n",
        "history = model.fit(\n",
        "    [train[:, 0], train[:, 1]],\n",
        "    train[:, 2],\n",
        "    epochs=30,\n",
        "    verbose=1,\n",
        "    validation_data=([test[:, 0], test[:, 1]], test[:, 2])\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fGpuCOrk6n_O",
        "outputId": "e3717d42-7c70-4be9-90a6-0203abd36fd6"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/30\n",
            "132/132 [==============================] - 1s 4ms/step - loss: 0.1083 - val_loss: 0.1071\n",
            "Epoch 2/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.1035 - val_loss: 0.1010\n",
            "Epoch 3/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0877 - val_loss: 0.0820\n",
            "Epoch 4/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0597 - val_loss: 0.0593\n",
            "Epoch 5/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0361 - val_loss: 0.0460\n",
            "Epoch 6/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0245 - val_loss: 0.0412\n",
            "Epoch 7/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0183 - val_loss: 0.0387\n",
            "Epoch 8/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0139 - val_loss: 0.0369\n",
            "Epoch 9/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0106 - val_loss: 0.0357\n",
            "Epoch 10/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0082 - val_loss: 0.0349\n",
            "Epoch 11/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0066 - val_loss: 0.0342\n",
            "Epoch 12/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0054 - val_loss: 0.0334\n",
            "Epoch 13/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0043 - val_loss: 0.0326\n",
            "Epoch 14/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0035 - val_loss: 0.0321\n",
            "Epoch 15/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0028 - val_loss: 0.0315\n",
            "Epoch 16/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0023 - val_loss: 0.0310\n",
            "Epoch 17/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0018 - val_loss: 0.0305\n",
            "Epoch 18/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0015 - val_loss: 0.0302\n",
            "Epoch 19/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 0.0012 - val_loss: 0.0298\n",
            "Epoch 20/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 9.5441e-04 - val_loss: 0.0295\n",
            "Epoch 21/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 7.8705e-04 - val_loss: 0.0295\n",
            "Epoch 22/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 6.3033e-04 - val_loss: 0.0293\n",
            "Epoch 23/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 5.0814e-04 - val_loss: 0.0292\n",
            "Epoch 24/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 3.9916e-04 - val_loss: 0.0291\n",
            "Epoch 25/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 3.2301e-04 - val_loss: 0.0292\n",
            "Epoch 26/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 2.5491e-04 - val_loss: 0.0290\n",
            "Epoch 27/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 1.9478e-04 - val_loss: 0.0290\n",
            "Epoch 28/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 1.5811e-04 - val_loss: 0.0290\n",
            "Epoch 29/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 1.1997e-04 - val_loss: 0.0289\n",
            "Epoch 30/30\n",
            "132/132 [==============================] - 0s 2ms/step - loss: 9.2792e-05 - val_loss: 0.0289\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def recommend_exercises(user_id, num_recommendations=5):\n",
        "    user_array = np.array([user_id] * len(exercise_ids))\n",
        "    exercise_array = np.array(exercise_ids)\n",
        "\n",
        "    # Предсказания\n",
        "    predictions = model.predict([user_array, exercise_array])\n",
        "\n",
        "    # Получение top-N рекомендаций\n",
        "    top_indices = predictions.reshape(-1).argsort()[-num_recommendations:][::-1]\n",
        "    recommended_exercises = [exercise_ids[i] for i in top_indices]\n",
        "\n",
        "    return exercises_df[exercises_df['exercise_id'].isin(recommended_exercises)]\n",
        "\n",
        "# Пример рекомендации для пользователя с user_id=1\n",
        "print(recommend_exercises(5))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rp7Nb68I6svY",
        "outputId": "07acaf8d-fc82-49f1-eb13-cb706562f86d"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2/2 [==============================] - 0s 4ms/step\n",
            "    exercise_id        exercise_name exercise_type target_muscle_group  \\\n",
            "0             1         Бег на месте        кардио                ноги   \n",
            "4             5  Прыжки со скакалкой        кардио                ноги   \n",
            "19           20      Ходьба на месте        кардио                ноги   \n",
            "30           31    Прыжки с выпадами        кардио                ноги   \n",
            "38           39        Джампинг Джек        кардио            все тело   \n",
            "\n",
            "    duration intensity fitness_level  \n",
            "0         15   средняя    начинающий  \n",
            "4         20   высокая       средний  \n",
            "19        20    низкая    начинающий  \n",
            "30        12   высокая       средний  \n",
            "38        15   средняя    начинающий  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(users_df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DFtbX16jB5aP",
        "outputId": "60d84aac-cd74-49c7-cbd2-d621a3724685"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   user_id  age  weight gender               goal fitness_level  \\\n",
            "0        1   28      75      М          похудение       средний   \n",
            "1        2   32      85      Ж        набор массы     начальный   \n",
            "2        3   29      68      Ж  поддержание формы       средний   \n",
            "3        4   27      70      М        набор массы   продвинутый   \n",
            "4        5   30      72      Ж          похудение    начинающий   \n",
            "\n",
            "   workout_frequency preferred_workout_types  \n",
            "0                  1   [\"кардио\", \"силовые\"]  \n",
            "1                  3                [\"йога\"]  \n",
            "2                  2   [\"кардио\", \"силовые\"]  \n",
            "3                  3             [\"силовые\"]  \n",
            "4                  2              [\"кардио\"]  \n"
          ]
        }
      ]
    }
  ]
}